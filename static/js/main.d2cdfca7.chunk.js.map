{"version":3,"sources":["components/Options/Options.js","components/Section/Section.js","components/Statistic/Statistic.js","components/Feedback/Feedback.js","App.js","index.js","components/Options/Options.module.css","components/Feedback/Feedback.module.css"],"names":["Options","options","handleIncrement","map","option","className","styles","OptionsBtn","name","type","onClick","Section","title","children","Statistic","good","neutral","bad","total","positivePerc","Feedback","state","e","target","setState","prevState","totalFeedback","positiveFeedbackPers","Math","round","Object","keys","this","Component","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"gRAyBeA,EAtBC,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC1B,OACE,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBACEC,UAAWC,IAAOC,WAElBC,KAAMJ,EACNK,KAAK,SACLC,QAASR,EALX,SAOGE,GALIA,SCAAO,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCoBQC,EArBG,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC9C,OAAID,EAEA,gCACE,oDAAaH,KACb,uDAAgBC,KAChB,mDAAYC,KACZ,uEAAiBC,KACjB,iEAA0BC,EAA1B,UAGQ,qB,gBCoCDC,E,4MA3CbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPf,gBAAkB,SAAAoB,GAChB,IAAQd,EAASc,EAAEC,OAAXf,KACR,EAAKgB,UAAS,SAAAC,GACZ,OAAO,eACJjB,EAAOiB,EAAUjB,GAAQ,O,EAKhCkB,cAAgB,kBAAM,EAAKL,MAAMN,KAAO,EAAKM,MAAML,QAAU,EAAKK,MAAMJ,K,EAExEU,qBAAuB,WACrB,OAAOC,KAAKC,MAAyB,IAAlB,EAAKR,MAAMN,KAAc,EAAKW,kB,4CAGnD,WACE,OACE,sBAAKrB,UAAWC,IAAOc,SAAvB,UACE,oBAAIR,MAAO,wBAAX,SACE,cAAC,EAAD,CACEX,QAAS6B,OAAOC,KAAKC,KAAKX,OAC1BnB,gBAAiB8B,KAAK9B,oBAG1B,cAAC,EAAD,CAASU,MAAO,eAChB,cAAC,EAAD,CACEG,KAAMiB,KAAKX,MAAMN,KACjBC,QAASgB,KAAKX,MAAML,QACpBC,IAAKe,KAAKX,MAAMJ,IAChBC,MAAOc,KAAKN,gBACZP,aAAca,KAAKL,gC,GArCNM,aCARC,EAJH,WACV,OAAO,cAAC,EAAD,KCGTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,WAAa,8B,kBCA/BD,EAAOC,QAAU,CAAC,SAAW,8B","file":"static/js/main.d2cdfca7.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport styles from \"../Options/Options.module.css\";\n\nconst Options = ({ options, handleIncrement }) => {\n  return (\n    <div>\n      {options.map((option) => (\n        <button\n          className={styles.OptionsBtn}\n          key={option}\n          name={option}\n          type=\"button\"\n          onClick={handleIncrement}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n};\nOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleIncrement: PropTypes.func.isRequired,\n};\n\nexport default Options;\n","const Section = ({ title, children }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistic = ({ good, neutral, bad, total, positivePerc }) => {\n  if (total) {\n    return (\n      <div>\n        <p>Good: 😘 {good}</p>\n        <p>Neutral: 😐 {neutral}</p>\n        <p>Bad: 😡 {bad}</p>\n        <p>Total: 👩‍💻 {total}</p>\n        <p>Positive feedback: 👏 {positivePerc}%</p>\n      </div>\n    );\n  } else return 'No feedback given';\n};\nStatistic.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePerc: PropTypes.number.isRequired,\n};\n\nexport default Statistic;\n","import { Component } from 'react';\nimport Options from '../Options/Options';\nimport Section from '../Section/Section';\nimport Statistic from '../Statistic';\nimport styles from '../Feedback/Feedback.module.css';\n\nclass Feedback extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = e => {\n    const { name } = e.target;\n    this.setState(prevState => {\n      return {\n        [name]: prevState[name] + 1,\n      };\n    });\n  };\n\n  totalFeedback = () => this.state.good + this.state.neutral + this.state.bad;\n\n  positiveFeedbackPers = () => {\n    return Math.round((this.state.good * 100) / this.totalFeedback());\n  };\n\n  render() {\n    return (\n      <div className={styles.Feedback}>\n        <h2 title={'Please leave feedback'}>\n          <Options\n            options={Object.keys(this.state)}\n            handleIncrement={this.handleIncrement}\n          />\n        </h2>\n        <Section title={'Statistics'} />\n        <Statistic\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n          total={this.totalFeedback()}\n          positivePerc={this.positiveFeedbackPers()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Feedback;\n","import Feedback from './components/Feedback'\n\nconst App = () => {\n  return <Feedback />;\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OptionsBtn\":\"Options_OptionsBtn__FMQe1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Feedback\":\"Feedback_Feedback__OO24w\"};"],"sourceRoot":""}